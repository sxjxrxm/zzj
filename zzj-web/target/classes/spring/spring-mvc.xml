<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	
	<!--扫描类包,标注spring注解的类自动转换成bean,同时完成bean的注入 
       (这样类中定义的spring注解  比如@repository @autowired等才能起作用)  -->
	<context:component-scan base-package="com.zzj"/>
	<context:annotation-config />
	
	<bean id="asyncThreadPool"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="50" /><!--最小线程数 -->
		<property name="maxPoolSize" value="800" /><!--最大线程数 -->
		<property name="queueCapacity" value="1000" /><!--缓冲队列大小 -->
		<property name="threadNamePrefix" value="async" /><!--线程池中产生的线程名字前缀 -->
		<property name="keepAliveSeconds" value="600" /><!--线程池中空闲线程的存活时间单位秒 -->
		<!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->
		<property name="rejectedExecutionHandler">
		<!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
		<!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
		<!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
		<!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
		<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
		
	</bean>
	<!-- 配置Fastjson支持 -->
    <!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->  
	<!-- <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter"> -->
    <mvc:annotation-driven
	content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/json;charset=UTF-8</value>
						<value>text/html;charset=UTF-8</value>
					</list>
				</property>
			</bean>
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
		</mvc:message-converters>
		<mvc:async-support task-executor="asyncThreadPool"
			default-timeout="-1">
			<mvc:callable-interceptors>
				<bean class="com.zzj.core.intercepter.CallableProcessInterceptor" />
			</mvc:callable-interceptors>
		</mvc:async-support>
	</mvc:annotation-driven>
	<mvc:default-servlet-handler />
	<!-- 权限验证拦截器 -->
	<mvc:interceptors>
		<!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
		<!-- <bean class="com.zzj.core.intercepter.ControllerInterceptor"/> -->
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<mvc:exclude-mapping path="/login/**"/>
			<mvc:exclude-mapping path="/qcloudim/**"/>
			<mvc:exclude-mapping path="/demo/**"/>
			<!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
			<bean class="com.zzj.core.intercepter.ControllerInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>
	<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="favorPathExtension" value="false" />
		<property name="favorParameter" value="false" />
	</bean>
    <!-- 配置多文件上传 -->  
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<property name="maxUploadSize" value="20480000" />
		<property name="resolveLazily" value="true" />
		<property name="maxInMemorySize" value="10240000" />
	</bean>
    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->  
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />  
        <property name="suffix" value=".jsp" />  
        <property name="contentType" value="text/html; charset=utf-8"/>
	</bean>
</beans>
